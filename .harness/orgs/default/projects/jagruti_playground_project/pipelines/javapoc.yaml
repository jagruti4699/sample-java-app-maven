pipeline:
  name: java-poc
  identifier: javapoc
  projectIdentifier: jagruti_playground_project
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: GithubJagruti
        build: <+input>
  stages:
    - stage:
        name: build stage
        identifier: build_stage
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
            override: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Build Java App
                  identifier: Build_Java
                  spec:
                    shell: Sh
                    command: |
                      echo "building java application"
                      mvn -B package --file zenzbg-template/greetings/pom.xml
              - step:
                  type: BuildAndPushDockerRegistry
                  name: Build and Push Image
                  identifier: Build_Push_Image
                  spec:
                    connectorRef: Dockerhubjagruti
                    repo: 46990406/demo-harness
                    tags:
                      - latest
                    dockerfile: zenzbg-template/greetings/Dockerfile
                    context: zenzbg-template/greetings
              - step:
                  type: Run
                  name: Run_2
                  identifier: Run_2
                  spec:
                    shell: Bash
                    command: |-
                      ssh -i mykey.pem vm@20.244.32.79
                      whoami
                      curl ifconfig.io
                      docker -v
                      cat /etc/os-release
                      pwd
                      echo "Pulling image "
                      docker pull 46990406/demo-harness:latest
                      docker stop demo-harness || true
                      docker rm demo-harness || true
                      docker run -d --name demo-harness -p 8080:8080 46990406/demo-harness:latest
                    envVariables:
                      mykey.pem: "-----BEGIN RSA PRIVATE KEY----- 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 -----END RSA PRIVATE KEY-----"
        description: ""
    - stage:
        name: Deploy
        identifier: Deploy
        description: ""
        type: Custom
        spec:
          environment:
            environmentRef: EnvJagruti
            deployToAll: false
            infrastructureDefinitions:
              - identifier: Infra
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: ShellScript_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |
                          echo "Pulling image and running container..."
                          pwd
                          curl ifconfig.io
                    environmentVariables: []
                    outputVariables: []
                    delegateSelectors:
                      - docker-delegate
                  timeout: 10m
        tags: {}
        delegateSelectors:
          - docker-delegate
    - stage:
        name: custom deploy
        identifier: custom_deploy
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: ShellScript_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |-
                          whoami
                          curl ifconfig.io
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
        tags: {}
